name: Security - Docker Image Analysis

permissions:
  contents: read
  security-events: write  # Required for uploading SARIF files to Security tab

on:
  schedule:
    - cron: '0 6 * * *'  # Run at 6 AM UTC daily to check latest production image on Docker Hub
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to scan'
        required: false
        default: 'latest'
        type: string
  workflow_call:  # Allow this workflow to be called by other workflows
    inputs:
      image_tag:
        description: 'Docker image tag to scan'
        required: false
        default: 'latest'
        type: string
      is_production_build:
        description: 'Whether this is a production build (tag)'
        required: false
        default: false
        type: boolean

jobs:
  docker-security-scan:
    name: 🔍 Docker Image Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Determine registry and image to scan
        id: config
        shell: bash
        run: |
          # Default values
          IMAGE_TAG="${{ inputs.image_tag || 'latest' }}"
          
          # Determine which registry to scan based on trigger and inputs
          REGISTRY="ghcr"
          IMAGE_REF="ghcr.io/${{ github.repository }}:${IMAGE_TAG}"
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            # Cron job: Always scan latest production image on 
            IMAGE_TAG="latest"
            echo "🕒 Scheduled scan: Checking latest production image on GHCR"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual trigger: Use user-specified registry or default to GHCR
            echo "🚀 Manual scan: Checking $REGISTRY registry"
          elif [[ "${{ github.event_name }}" == "workflow_call" ]]; then
            # Called from CI: Determine registry based on build type
            echo "🔧 Build scan: Checking GHCR"
          else
            # Fallback: For development branches, use GHCR; for production, use Docker Hub
            echo "⚠️  Fallback to GHCR for development build"
          fi
          
          echo "registry=${REGISTRY}" >> $GITHUB_OUTPUT
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "image_ref=${IMAGE_REF}" >> $GITHUB_OUTPUT
          
          echo "📋 Scan Configuration:"
          echo "  Event: ${{ github.event_name }}"
          echo "  Registry: ${REGISTRY}"
          echo "  Image Tag: ${IMAGE_TAG}"
          echo "  Full Image Reference: ${IMAGE_REF}"
          echo "  Production Build: ${{ inputs.is_production_build }}"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Run Trivy security scan
        id: trivy-image
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: "${{ steps.config.outputs.image_ref }}"
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3.30.3
        if: ${{ always() && hashFiles('trivy-image-results.sarif') != '' }}
        with:
          sarif_file: 'trivy-image-results.sarif'
          category: 'trivy-docker-image'

      - name: Run Grype security scan
        id: grype-scan
        continue-on-error: true
        uses: anchore/scan-action@v7.0.0
        with:
          image: "${{ steps.config.outputs.image_ref }}"
          fail-build: false
          severity-cutoff: medium
          output-format: sarif

      - name: Move Grype results to named file
        if: always()
        run: |
          if [ -f "results.sarif" ]; then
            mv results.sarif grype-results.sarif
          fi

      - name: Upload Grype scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3.30.3
        if: always() && hashFiles('grype-results.sarif') != ''
        with:
          sarif_file: 'grype-results.sarif'
          category: 'grype-docker-image'

      - name: Run Snyk security scan
        id: snyk-scan
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: "${{ steps.config.outputs.image_ref }}"
          args: --severity-threshold=medium --file=Dockerfile --sarif-file-output=snyk-results.sarif

      - name: Upload Snyk scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3.30.3
        if: always() && hashFiles('snyk-results.sarif') != ''
        with:
          sarif_file: 'snyk-results.sarif'
          category: 'snyk-docker-image'
